{"version":3,"sources":["components/AcusticSound/AcusticSound.js","components/Chord/Chord.js","components/Fret/Fret.js","components/Guitar/Guitar.js","App.js","serviceWorker.js","index.js"],"names":["AcusticBox","state","sounding","this","ctx","prevProps","prevState","snapshot","props","frequency","oscillator","value","setState","window","AudioContext","webkitAudioContext","createOscillator","connect","destination","start","real","Float32Array","imag","ac","wave","createPeriodicWave","disableNormalization","setPeriodicWave","console","log","className","Component","Chord","currentFrequency","onMouseDown","e","percentage","clientX","currentTarget","offsetWidth","maxFrequency","frequencyGenerated","onMouseUp","color","style","height","size","Fret","dots","i","push","key","width","renderDots","defaultProps","Guitar","frets","Array","map","fret","index","renderFrets","chords","chord","onChordReleased","onChordPressed","tone","App","onChangeFrequency","getAttribute","Number","parseFloat","position","top","left","href","src","alt","data-recalc-dims","htmlFor","onChange","data-index","type","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d617475a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class AcusticBox extends Component {\n    state = {\n        sounding: false,\n    };\n\n    static propTypes = {\n        frequency: PropTypes.number.isRequired,\n    };\n\n    componentDidMount() {\n        this.ctx = null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.frequency !== prevProps.frequency) {\n            if (this.props.frequency === null) {\n                this.oscillator.frequency.value = null;\n                this.setState({ sounding: false });\n            } else {\n                if (this.ctx === null) {\n                    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n                    this.ctx = new AudioContext();\n                    this.oscillator = this.ctx.createOscillator();\n                    this.oscillator.connect(this.ctx.destination);\n                    this.oscillator.frequency.value = null;\n                    this.oscillator.start();\n                }\n\n                let real = new Float32Array(2);\n                let imag = new Float32Array(2);\n                let ac = new AudioContext();\n\n                real[0] = 0;\n                real[1] = 3;\n                real[2] = 6;\n                real[3] = 9;\n                real[4] = 12;\n                real[5] = 15;\n                real[6] = 18;\n\n                imag[0] = 0;\n                imag[1] = 1.5;\n                imag[2] = 3;\n                imag[3] = 4.5;\n                imag[4] = 6;\n                imag[5] = 7.5;\n                imag[6] = 9;\n                imag[7] = 10.5;\n                imag[8] = 12;\n\n                const wave = ac.createPeriodicWave(real, imag, {disableNormalization: true});\n\n                this.oscillator.setPeriodicWave(wave);\n\n                this.oscillator.frequency.value = this.props.frequency;\n                console.log(this.props.frequency);\n                this.setState({ sounding: true });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"b-acustic-sound\" />\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './chord.scss';\nimport AcusticSound from '../AcusticSound/AcusticSound';\n\nexport default class Chord extends Component {\n    static propTypes = {\n        tone: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        frequency: PropTypes.number.isRequired,\n        size: PropTypes.number.isRequired,\n    };\n\n    state = {\n        currentFrequency: null\n    };\n\n    onMouseDown = (e) => {\n        if (this.state.currentFrequency === null) {\n            const positionPressed = e.clientX;\n            const guitarLength = e.currentTarget.offsetWidth;\n            const percentage = (100 * positionPressed) / guitarLength;\n            const maxFrequency = this.props.frequency * 2;\n            const frequencyGenerated = this.props.frequency + (percentage * maxFrequency / 100);\n            this.setState({currentFrequency: frequencyGenerated});\n        } else {\n            this.setState({ currentFrequency: null })\n        }\n    };\n\n    render() {\n        return (\n            <div\n                onMouseUp={this.onMouseUp}\n                onMouseDown={this.onMouseDown}\n                className='b-chord'\n            >\n                <div className={`effective-chord ${this.props.color}`} style={{height: `${this.props.size}px`}} />\n                <AcusticSound frequency={this.state.currentFrequency} />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './fret.scss';\n\nexport default class Fret extends Component {\n    static propTypes = {\n        dots: PropTypes.number,\n        width: PropTypes.number.isRequired,\n    };\n\n    static defaultProps = {\n        dots: 0,\n    };\n\n    renderDots() {\n        const dots = [];\n\n        for (let i = 0; i < this.props.dots; i++) {\n            dots.push(<div key={`${i}-dot`} className=\"dot\" />);\n        }\n\n        return(\n            <div className={`dots ${this.props.dots > 1 ? 'two' : 'one'}`}>\n                {\n                    dots\n                }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div\n                className='b-fret'\n                style={{width: `${this.props.width}%`}}\n            >\n                {this.props.dots > 0 && this.renderDots()}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Chord from '../Chord/Chord';\nimport PropTypes from 'prop-types';\nimport './guitar.scss';\nimport Fret from '../Fret/Fret';\n\nexport default class Guitar extends Component {\n\n    static propTypes = {\n        frets: PropTypes.number.isRequired,\n        chords: PropTypes.arrayOf(PropTypes.shape({\n            tone: PropTypes.string.isRequired,\n            color: PropTypes.string.isRequired,\n            frequency: PropTypes.number.isRequired,\n        })),\n    };\n\n    renderFrets() {\n        const frets = new Array(this.props.frets);\n        for (let i = 0; i < this.props.frets; i++) {\n            let dots = 0;\n            if (i !== 0 && i % 2 === 0 ){\n                dots = 1;\n            }\n\n            if (i !== 0 &&  i % 11 === 0 ){\n                dots = 2;\n            }\n\n            frets[i] = {\n                dots,\n            }\n        }\n\n        return(\n            <div className=\"frets\">\n                {\n                    frets.map((fret, index) => <Fret width={100 / this.props.frets} dots={fret.dots} key={index}/>)\n                }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='b-guitar'>\n                {this.renderFrets()}\n                <div className=\"chords\">\n                    {this.props.chords.map((chord, index) => <Chord color={chord.color} size={10/(index + 1)} onChordReleased={this.onChordReleased} onChordPressed={this.onChordPressed} key={chord.frequency} frequency={chord.frequency} tone={chord.tone} />)}\n                    )\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './app.scss';\nimport Guitar from './components/Guitar/Guitar';\n\nexport default class App extends Component {\n    state = {\n        frets: 12,\n        chords: [\n            {\n                tone: 'E',\n                frequency: 82.41,\n                color: 'gold',\n            },\n            {\n                tone: 'A',\n                frequency: 110.00,\n                color: 'gold',\n            },\n            {\n                tone: 'D',\n                frequency: 146.83,\n                color: 'gold',\n            },\n            {\n                tone: 'G',\n                frequency: 196.00,\n                color: 'silver',\n            },\n            {\n                tone: 'B',\n                frequency: 246.94,\n                color: 'silver',\n            },\n            {\n                tone: 'E',\n                frequency: 329.63,\n                color: 'silver',\n            }\n        ]\n    };\n\n    onChangeFrequency = (e) => {\n        const index = e.currentTarget.getAttribute('data-index');\n        const value = Number.parseFloat(e.currentTarget.value);\n        this.setState(prevState => {\n            const chords = prevState.chords;\n            chords[index].frequency = value;\n            return { chords };\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <h1>Guitar App</h1>\n                <a\n                    style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                    }}\n                    href=\"https://github.com/mbfassnacht/react-guitar\">\n                    <img\n                        width=\"149\"\n                        height=\"149\"\n                        src=\"https://github.blog/wp-content/uploads/2008/12/forkme_left_white_ffffff.png?resize=149%2C149\"\n                        className=\"attachment-full size-full\"\n                        alt=\"Fork me on GitHub\"\n                        data-recalc-dims=\"1\" />\n                </a>\n                <Guitar frets={this.state.frets} chords={this.state.chords}/>\n                <form>\n                    <label htmlFor=\"6th\">\n                        6th Chord\n                        <input onChange={this.onChangeFrequency} data-index={0} type=\"number\" value={this.state.chords[0].frequency} id=\"6th\" />\n                    </label>\n                    <label htmlFor=\"5th\">\n                        5th Chord\n                        <input onChange={this.onChangeFrequency} data-index={1} type=\"number\" value={this.state.chords[1].frequency} id=\"5th\" />\n                    </label>\n                    <label htmlFor=\"4th\">\n                        4th Chord\n                        <input onChange={this.onChangeFrequency} data-index={2} type=\"number\" value={this.state.chords[2].frequency} id=\"4th\" />\n                    </label>\n                    <label htmlFor=\"3rd\">\n                        3rd Chord\n                        <input onChange={this.onChangeFrequency} data-index={3} type=\"number\" value={this.state.chords[3].frequency} id=\"3rd\" />\n                    </label>\n                    <label htmlFor=\"2nd\">\n                        2nd Chord\n                        <input onChange={this.onChangeFrequency} data-index={4} type=\"number\" value={this.state.chords[4].frequency} id=\"2nd\" />\n                    </label>\n                    <label htmlFor=\"1st\">\n                        1st Chord\n                        <input onChange={this.onChangeFrequency} data-index={5} type=\"number\" value={this.state.chords[5].frequency} id=\"1st\" />\n                    </label>\n                </form>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}