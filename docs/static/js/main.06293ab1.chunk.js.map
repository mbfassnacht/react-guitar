{"version":3,"sources":["components/Chord/Chord.js","components/AcusticBox/AcusticBox.js","components/Fret/Fret.js","components/Guitar/Guitar.js","App.js","serviceWorker.js","index.js"],"names":["Chord","onMouseDown","e","percentage","clientX","currentTarget","offsetWidth","maxFrequency","props","frequency","frequencyGenerated","console","log","onChordPressed","onMouseUp","this","onChordReleased","className","color","style","height","size","Component","AcusticBox","state","sounding","window","AudioContext","webkitAudioContext","ctx","oscillator","createOscillator","real","Float32Array","imag","ac","wave","createPeriodicWave","disableNormalization","setPeriodicWave","connect","destination","value","start","prevProps","prevState","snapshot","setState","Fret","dots","i","push","width","renderDots","defaultProps","Guitar","currentFrequency","frets","Array","map","fret","index","key","renderFrets","chords","chord","tone","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06293ab1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './chord.scss';\n\nexport default class Chord extends Component {\n    static propTypes = {\n        tone: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        frequency: PropTypes.number.isRequired,\n        onChordPressed: PropTypes.func.isRequired,\n        onChordReleased: PropTypes.func.isRequired,\n        size: PropTypes.number.isRequired,\n    };\n\n    onMouseDown = (e) => {\n        const positionPressed = e.clientX;\n        const guitarLength = e.currentTarget.offsetWidth;\n        const percentage = (100 * positionPressed) / guitarLength;\n        const maxFrequency = this.props.frequency * 2;\n        const frequencyGenerated = this.props.frequency + (percentage * maxFrequency / 100);\n        console.log(frequencyGenerated);\n        this.props.onChordPressed(frequencyGenerated);\n    };\n\n    render() {\n        return (\n            <div\n                onMouseUp={this.props.onChordReleased}\n                onMouseDown={this.onMouseDown}\n                className='b-chord'\n            >\n                <div className={`effective-chord ${this.props.color}`} style={{height: `${this.props.size}px`}} />\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\n\nexport default class AcusticBox extends Component {\n    state = {\n        sounding: false,\n    };\n\n    componentDidMount() {\n        window.AudioContext = window.AudioContext || window.webkitAudioContext;\n        const ctx = new AudioContext();\n        this.oscillator = ctx.createOscillator();\n\n        let real = new Float32Array(2);\n        let imag = new Float32Array(2);\n        let ac = new AudioContext();\n\n        real[0] = 0;\n        imag[0] = 0;\n        real[1] = 10;\n        imag[1] = 10;\n\n        const wave = ac.createPeriodicWave(real, imag, {disableNormalization: true});\n\n        this.oscillator.setPeriodicWave(wave);\n\n        this.oscillator.connect(ctx.destination);\n        this.oscillator.frequency.value = null;\n        this.oscillator.start();\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.frequency !== prevProps.frequency) {\n            if (this.props.frequency === null) {\n                this.oscillator.frequency.value = null;\n                this.setState({ sounding: false });\n            } else {\n                this.oscillator.frequency.value = this.props.frequency;\n                this.setState({ sounding: true });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"b-acustic-box\" />\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './fret.scss';\n\nexport default class Fret extends Component {\n    static propTypes = {\n        dots: PropTypes.number,\n        width: PropTypes.number.isRequired,\n    };\n\n    static defaultProps = {\n        dots: 0,\n    };\n\n    renderDots() {\n        const dots = [];\n\n        for (let i = 0; i < this.props.dots; i++) {\n            dots.push(<div className=\"dot\" />);\n        }\n\n        return(\n            <div className={`dots ${this.props.dots > 1 ? 'two' : 'one'}`}>\n                {\n                    dots\n                }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div\n                className='b-fret'\n                style={{width: `${this.props.width}%`}}\n            >\n                {this.props.dots > 0 && this.renderDots()}\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Chord from '../Chord/Chord';\nimport AcusticBox from '../AcusticBox/AcusticBox';\nimport PropTypes from 'prop-types';\nimport './guitar.scss';\nimport Fret from '../Fret/Fret';\n\nexport default class Guitar extends Component {\n\n    state = {\n        currentFrequency: null,\n    };\n\n    static propTypes = {\n        frets: PropTypes.number.isRequired,\n        chords: PropTypes.arrayOf(PropTypes.shape({\n            tone: PropTypes.string.isRequired,\n            color: PropTypes.string.isRequired,\n            frequency: PropTypes.number.isRequired,\n        })),\n    };\n\n    onChordPressed = (frequency) => {\n        this.setState({ currentFrequency: frequency })\n    };\n\n    onChordReleased = (e) => {\n        this.setState({ currentFrequency: null })\n    };\n\n    renderFrets() {\n        const frets = new Array(this.props.frets);\n        for (let i = 0; i < this.props.frets; i++) {\n            let dots = 0;\n            if (i !== 0 && i % 2 === 0 ){\n                dots = 1;\n            }\n\n            if (i !== 0 &&  i % 11 === 0 ){\n                dots = 2;\n            }\n\n            frets[i] = {\n                dots,\n            }\n        }\n\n        return(\n            <div className=\"frets\">\n                {\n                    frets.map((fret, index) => <Fret width={100 / this.props.frets} dots={fret.dots} key={index}/>)\n                }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='b-guitar'>\n                <AcusticBox frequency={this.state.currentFrequency} />\n                {this.renderFrets()}\n                <div className=\"chords\">\n                    {this.props.chords.map((chord, index) => <Chord color={chord.color} size={10/(index + 1)} onChordReleased={this.onChordReleased} onChordPressed={this.onChordPressed} key={chord.frequency} frequency={chord.frequency} tone={chord.tone} />)}\n                    )\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './app.scss';\nimport Guitar from './components/Guitar/Guitar';\n\nfunction App() {\n    const chords = [\n        {\n            tone: 'E',\n            frequency: 82.41,\n            color: 'gold',\n        },\n        {\n            tone: 'A',\n            frequency: 110.00,\n            color: 'gold',\n        },\n        {\n            tone: 'D',\n            frequency: 146.83,\n            color: 'gold',\n        },\n        {\n            tone: 'G',\n            frequency: 196.00,\n            color: 'silver',\n        },\n        {\n            tone: 'B',\n            frequency: 246.94,\n            color: 'silver',\n        },\n        {\n            tone: 'E',\n            frequency: 329.63,\n            color: 'silver',\n        }\n    ];\n\n    const frets = 12;\n\n    return (\n        <div className=\"app\">\n          <Guitar frets={frets} chords={chords}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}